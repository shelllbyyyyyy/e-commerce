generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username          String
  email             String          @unique @db.VarChar
  password          String
  isVerified        Boolean         @default(false)
  display_name      String?
  profile_picture   String?
  phone_number      String?
  createdAt         DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?       @updatedAt @db.Timestamptz(6)

  address           Address[]
  cart              Cart?
  order             Order[]

  @@map("user")
}

model Address {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name        String
  last_name         String
  phone_number      String
  street            String
  city              String
  state             String
  postal_code       String
  country_code      String
  mapUrl            String?
  createdAt         DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime        @updatedAt @db.Timestamptz(6)

  userId        String   @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

enum InventoryStatus {
  AVAILABLE
  ON_ORDER
  RESERVED
}

model Inventory {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity         Int
  status           InventoryStatus

  itemId           String          @db.Uuid
  item             ProductVariant  @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Product {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  price                Int
  imageUrl             String[]
  slug                 String                 @unique
  description          String    
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt @db.Timestamptz(6)

  category             CategoriesOnProducts[]
  variant              ProductVariant[]

  @@map("product")
}

model ProductVariant {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sku                 String
  price               Int
  imageUrl            String
  label               String
  createdAt           DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime    @updatedAt @db.Timestamptz(6)

  productId           String      @db.Uuid
  product             Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  inventory           Inventory[]
  cartItem            CartItem[]
  orderProduct        OrderProduct[]

  @@map("variant")
}

model CategoriesOnProducts {
  categoryId          String   @db.Uuid
  category            Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  productId           String   @db.Uuid
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("categoriesOnProduct")
}

model Category {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @unique
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt @db.Timestamptz(6)

  product              CategoriesOnProducts[]

  @@map("category")
}

model Cart {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String            @unique @db.Uuid
  items                CartItem[]

  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@map("cart")
}

model CartItem {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity             Int
  
  cartId               String            @db.Uuid
  cart                 Cart              @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId            String            @db.Uuid
  item                 ProductVariant    @relation(fields: [productId], references: [id])

  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@unique([cartId, productId])
  @@map("cartItem")
}

model Order {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status               OrderStatus
  totalAmount          Float
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  user                 User              @relation( fields: [userId], references: [id], onDelete: Cascade)
  userId               String            @db.Uuid

  items                OrderProduct[]

  @@map("order")
}

model OrderProduct {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity             Int
  price                Float
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  orderId              String            @db.Uuid
  order                Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  itemId               String            @db.Uuid
  item                 ProductVariant    @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([orderId, itemId])
  @@map("orderProduct")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}